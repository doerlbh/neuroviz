/** @typedef {typeof __propDef.props}  LayerCakeProps */
/** @typedef {typeof __propDef.events}  LayerCakeEvents */
/** @typedef {typeof __propDef.slots}  LayerCakeSlots */
/** Layer Cake component */
export default class LayerCake extends SvelteComponentTyped<{
    r?: string | number | Function | any[];
    y?: string | number | Function | any[];
    x?: string | number | Function | any[];
    z?: string | number | Function | any[];
    width?: number;
    height?: number;
    percentRange?: boolean;
    containerWidth?: number;
    containerHeight?: number;
    custom?: any;
    data?: any;
    xNice?: boolean;
    yNice?: boolean;
    zNice?: boolean;
    rNice?: boolean;
    xReverse?: boolean;
    yReverse?: boolean;
    zReverse?: boolean;
    rReverse?: boolean;
    xPadding?: [leftPixels: number, rightPixels: number];
    yPadding?: [leftPixels: number, rightPixels: number];
    zPadding?: [leftPixels: number, rightPixels: number];
    rPadding?: [leftPixels: number, rightPixels: number];
    padding?: {
        top?: number;
        right?: number;
        bottom?: number;
        left?: number;
    };
    flatData?: any[];
    extents?: {
        x?: [min: number, max: number];
        y?: [min: number, max: number];
        r?: [min: number, max: number];
        z?: [min: number, max: number];
    };
    xDomain?: string[] | number[] | [min: number, max: number];
    yDomain?: string[] | number[] | [min: number, max: number];
    zDomain?: string[] | number[] | [min: number, max: number];
    rDomain?: string[] | number[] | [min: number, max: number];
    xRange?: Function | string[] | number[] | [min: number, max: number];
    yRange?: Function | string[] | number[] | [min: number, max: number];
    zRange?: Function | string[] | number[] | [min: number, max: number];
    rRange?: Function | string[] | number[] | [min: number, max: number];
    xScale?: Function;
    yScale?: Function;
    zScale?: Function;
    rScale?: Function;
    ssr?: boolean;
    pointerEvents?: boolean;
    position?: string;
    element?: Element;
}, {
    [evt: string]: CustomEvent<any>;
}, {
    default: {
        element: Element;
        width: number;
        height: number;
        aspectRatio: number;
        containerWidth: number;
        containerHeight: number;
    };
}> {
}
export type LayerCakeProps = typeof __propDef.props;
export type LayerCakeEvents = typeof __propDef.events;
export type LayerCakeSlots = typeof __propDef.slots;
import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        r?: string | Function | number | any[];
        y?: string | Function | number | any[];
        x?: string | Function | number | any[];
        z?: string | Function | number | any[];
        width?: number;
        height?: number;
        percentRange?: boolean;
        containerWidth?: number;
        containerHeight?: number;
        custom?: any;
        data?: any[] | any;
        xNice?: boolean;
        yNice?: boolean;
        zNice?: boolean;
        rNice?: boolean;
        xReverse?: boolean;
        yReverse?: boolean;
        zReverse?: boolean;
        rReverse?: boolean;
        xPadding?: [leftPixels: number, rightPixels: number];
        yPadding?: [leftPixels: number, rightPixels: number];
        zPadding?: [leftPixels: number, rightPixels: number];
        rPadding?: [leftPixels: number, rightPixels: number];
        padding?: {
            top?: number;
            right?: number;
            bottom?: number;
            left?: number;
        };
        flatData?: any[];
        extents?: {
            x?: [min: number, max: number];
            y?: [min: number, max: number];
            r?: [min: number, max: number];
            z?: [min: number, max: number];
        };
        xDomain?: [min: number | null, max: number | null] | string[] | number[];
        yDomain?: [min: number | null, max: number | null] | string[] | number[];
        zDomain?: [min: number | null, max: number | null] | string[] | number[];
        rDomain?: [min: number | null, max: number | null] | string[] | number[];
        xRange?: [min: number, max: number] | Function | string[] | number[];
        yRange?: [min: number, max: number] | Function | string[] | number[];
        zRange?: [min: number, max: number] | Function | string[] | number[];
        rRange?: [min: number, max: number] | Function | string[] | number[];
        xScale?: Function;
        yScale?: Function;
        zScale?: Function;
        rScale?: Function;
        ssr?: boolean;
        pointerEvents?: boolean;
        position?: string;
        element?: Element;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {
        default: {
            element: Element;
            width: number;
            height: number;
            aspectRatio: number;
            containerWidth: number;
            containerHeight: number;
        };
    };
};
export {};
